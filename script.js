document.addEventListener('DOMContentLoaded', () => {
    const postsContainer = document.getElementById('posts-container');
    const createPostButton = document.getElementById('create-post-button');
    const postForm = document.getElementById('post-form');
    const submitPostButton = document.getElementById('submit-post');
    const searchInput = document.getElementById('search');
    const filterSelect = document.getElementById('filter');
    
    const initialPosts = [
        { id: 1, title: '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∑–Ω–∞–Ω–∏–µ–º?', content: '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –í—á–µ—Ä–∞ –Ω–∞—à–ª–∞ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ—Å—É—Ä—Å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è Python, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å–µ–º, –∫—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏. –°—Å—ã–ª–∫–∞!', likes: 5, dislikes: 2, author: 'admin' },
        { id: 2, title: '–í–æ–ø—Ä–æ—Å!–ü–æ–º–æ–≥–∏—Ç–µ :(', content: '–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–æ–µ–∫—Ç—É –Ω–∞ JavaScript. –ö–∞–∫ –ª—É—á—à–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∫–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API? –ë—É–¥—É –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω–∞ –∑–∞ —Å–æ–≤–µ—Ç—ã!', likes: 3, dislikes: 1, author: 'admin' },
        { id: 3, title: '–°–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', content: '–î–µ–≤—É—à–∫–∏, –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –≤–∞–∂–Ω–æ—Å—Ç—å —Å–µ—Ç–µ–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è. –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è—Ö, –≤–µ–±–∏–Ω–∞—Ä–∞—Ö –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö, —á—Ç–æ–±—ã —Ä–∞—Å—à–∏—Ä—è—Ç—å —Å–≤–æ–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏!', likes: 8, dislikes: 0, author: 'admin' },
        { id: 4, title: '–õ–∏—á–Ω—ã–π –æ–ø—ã—Ç?', content: '–ù–µ–¥–∞–≤–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É –≤ IT-–∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Ö–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏. –≠—Ç–æ –±—ã–ª –æ—Ç–ª–∏—á–Ω—ã–π –æ–ø—ã—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥ –º–Ω–µ –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —è —Ö–æ—á—É –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ. ', likes: 7, dislikes: 4, author: 'admin' }
    ];
    
    const currentUser = 'user';
    const posts = [...initialPosts]; 

    function renderPosts() {
        postsContainer.innerHTML = '';
        posts.forEach(post => {
            const postDiv = document.createElement('div');
            postDiv.className = 'post';
            
            const rating = post.likes - post.dislikes;
            
            postDiv.innerHTML = `
                <a href="post.html?id=${post.id}" class="title">${post.title}</a>
                <div class="content">${post.content}</div>
                <div class="actions">
                    <div class="rating">–†–µ–π—Ç–∏–Ω–≥: ${rating}</div>
                    <div class="likes-dislikes">
                        <button class="like-btn" onclick="likePost(${post.id})">üëç ${post.likes}</button>
                        <button class="dislike-btn" onclick="dislikePost(${post.id})">üëé ${post.dislikes}</button>
                        ${post.author === currentUser ? `
                            <button class="edit-btn" onclick="editPost(${post.id})">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                            <button class="delete-btn" onclick="deletePost(${post.id})">–£–¥–∞–ª–∏—Ç—å</button>` : ''}
                    </div>
                </div>
            `;
            
            postsContainer.appendChild(postDiv);
        });
    }
    
    function addPost(title, content) {
        const newPost = {
            id: posts.length + 1,
            title,
            content,
            likes: 0,
            dislikes: 0,
            author: currentUser
        };
        posts.push(newPost);
        renderPosts();
    }

    window.editPost = function(postId) {
        const post = posts.find(p => p.id === postId);
        if (post) {
            document.getElementById('post-title').value = post.title;
            document.getElementById('post-content').value = post.content;
            postForm.classList.remove('hidden');
            submitPostButton.innerText = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
            
            submitPostButton.onclick = () => {
                const updatedTitle = document.getElementById('post-title').value.trim();
                const updatedContent = document.getElementById('post-content').value.trim();
                if (updatedTitle && updatedContent) {
                    post.title = updatedTitle;
                    post.content = updatedContent;
                    postForm.classList.add('hidden');
                    submitPostButton.innerText = '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å';
                    renderPosts();
                }
            };
        }
    }
    
    window.likePost = function(postId) {
        const post = posts.find(p => p.id === postId);
        if (post) {
            post.likes++;
            renderPosts();
        }
    }
    
    window.dislikePost = function(postId) {
        const post = posts.find(p => p.id === postId);
        if (post) {
            post.dislikes++;
            renderPosts();
        }
    }
    
    window.deletePost = function(postId) {
        const postIndex = posts.findIndex(p => p.id === postId);
        if (postIndex !== -1) {
            posts.splice(postIndex, 1);
            renderPosts();
        }
    }
    
    createPostButton.addEventListener('click', () => {
        postForm.classList.toggle('hidden');
        submitPostButton.innerText = '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å';
        submitPostButton.onclick = () => {
            const title = document.getElementById('post-title').value.trim();
            const content = document.getElementById('post-content').value.trim();
            if (title && content) {
                addPost(title, content);
                document.getElementById('post-title').value = '';
                document.getElementById('post-content').value = '';
                postForm.classList.add('hidden');
            }
        };
    });
    
    searchInput.addEventListener('input', () => {
        const query = searchInput.value.toLowerCase();
        const filteredPosts = posts.filter(post => post.title.toLowerCase().includes(query) || post.content.toLowerCase().includes(query));
        postsContainer.innerHTML = '';
        filteredPosts.forEach(post => {
            const postDiv = document.createElement('div');
            postDiv.className = 'post';
            
            const rating = post.likes - post.dislikes;
            
            postDiv.innerHTML = `
                <a href="post.html?id=${post.id}" class="title">${post.title}</a>
                <div class="content">${post.content}</div>
                <div class="actions">
                    <div class="rating">–†–µ–π—Ç–∏–Ω–≥: ${rating}</div>
                    <div class="likes-dislikes">
                        <button class="like-btn" onclick="likePost(${post.id})">üëç ${post.likes}</button>
                        <button class="dislike-btn" onclick="dislikePost(${post.id})">üëé ${post.dislikes}</button>
                        ${post.author === currentUser ? `
                            <button class="edit-btn" onclick="editPost(${post.id})">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                            <button class="delete-btn" onclick="deletePost(${post.id})">–£–¥–∞–ª–∏—Ç—å</button>` : ''}
                    </div>
                </div>
            `;
            
            postsContainer.appendChild(postDiv);
        });
    });
    
    filterSelect.addEventListener('change', () => {
        const filter = filterSelect.value;
        if (filter === 'popular') {
            posts.sort((a, b) => (b.likes - b.dislikes) - (a.likes - a.dislikes));
        } else if (filter === 'less-popular') {
            posts.sort((a, b) => (a.likes - a.dislikes) - (b.likes - b.dislikes));
        } else {
            posts.sort((a, b) => a.id - b.id);
        }
        renderPosts();
    });
    
    renderPosts();
});
